/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StakingContractFactoryInterface
  extends ethers.utils.Interface {
  functions: {
    "camoToken()": FunctionFragment;
    "getStakingContract(address)": FunctionFragment;
    "newStakingContract(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "camoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newStakingContract",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "camoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newStakingContract",
    data: BytesLike
  ): Result;

  events: {
    "StakingContractCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakingContractCreated"): EventFragment;
}

export type StakingContractCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  { creator: string; stakingContract: string; timestamp: BigNumber }
>;

export type StakingContractCreatedEventFilter =
  TypedEventFilter<StakingContractCreatedEvent>;

export interface StakingContractFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingContractFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    camoToken(overrides?: CallOverrides): Promise<[string]>;

    getStakingContract(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newStakingContract(
      releaseTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  camoToken(overrides?: CallOverrides): Promise<string>;

  getStakingContract(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  newStakingContract(
    releaseTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    camoToken(overrides?: CallOverrides): Promise<string>;

    getStakingContract(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    newStakingContract(
      releaseTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "StakingContractCreated(address,address,uint256)"(
      creator?: string | null,
      stakingContract?: null,
      timestamp?: null
    ): StakingContractCreatedEventFilter;
    StakingContractCreated(
      creator?: string | null,
      stakingContract?: null,
      timestamp?: null
    ): StakingContractCreatedEventFilter;
  };

  estimateGas: {
    camoToken(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingContract(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newStakingContract(
      releaseTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    camoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingContract(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newStakingContract(
      releaseTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
