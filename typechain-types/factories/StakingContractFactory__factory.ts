/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingContractFactory,
  StakingContractFactoryInterface,
} from "../StakingContractFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_camoToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakingContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "StakingContractCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "camoToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "getStakingContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "releaseTime",
        type: "uint256",
      },
    ],
    name: "newStakingContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e2a380380610e2a83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610d99806100916000396000f3fe6080604052600436106100345760003560e01c8063162bc937146100395780635300f9b414610062578063d5773de514610082575b600080fd5b61004c6100473660046101bb565b610097565b60405161005991906101d3565b60405180910390f35b34801561006e57600080fd5b5061004c61007d36600461018d565b610153565b34801561008e57600080fd5b5061004c610171565b600080600160009054906101000a90046001600160a01b031633846040516100be90610180565b6100ca939291906101e7565b604051809103906000f0801580156100e6573d6000803e3d6000fd5b50336000818152602081905260409081902080546001600160a01b0319166001600160a01b03851617905551919250907f65931c788dd234faedfe2e9127674f5146d97c86e38e592b4167c07e74efd93e90610145908490429061020b565b60405180910390a292915050565b6001600160a01b039081166000908152602081905260409020541690565b6001546001600160a01b031681565b610b3f8061022583390190565b60006020828403121561019e578081fd5b81356001600160a01b03811681146101b4578182fd5b9392505050565b6000602082840312156101cc578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392909216825260208201526040019056fe60e06040526000805460ff1916905534801561001a57600080fd5b50604051610b3f380380610b3f833981016040819052610039916100a7565b8282824281116100645760405162461bcd60e51b815260040161005b906100e2565b60405180910390fd5b6001600160601b0319606093841b81166080529190921b1660a05260c05250610134915050565b80516001600160a01b03811681146100a257600080fd5b919050565b6000806000606084860312156100bb578283fd5b6100c48461008b565b92506100d26020850161008b565b9150604084015190509250925092565b60208082526032908201527f546f6b656e54696d656c6f636b3a2072656c656173652074696d65206973206260408201527165666f72652063757272656e742074696d6560701b606082015260800190565b60805160601c60a05160601c60c0516109d6610169600039600061042e015260006102420152600061048901526109d66000f3fe6080604052600436106100865760003560e01c80638ce671ec116100595780638ce671ec146101025780638da5cb5b14610117578063b91d40011461012c578063de242ff414610141578063fc0c546a1461015657610086565b80630b58f7451461008b57806338af3eed146100a057806386d1a69f146100cb5780638b7afe2e146100e0575b600080fd5b61009e6100993660046106cd565b61016b565b005b3480156100ac57600080fd5b506100b5610240565b6040516100c29190610719565b60405180910390f35b3480156100d757600080fd5b5061009e610264565b3480156100ec57600080fd5b506100f5610359565b6040516100c29190610967565b34801561010e57600080fd5b506100f56103e3565b34801561012357600080fd5b506100b5610418565b34801561013857600080fd5b506100f561042c565b34801561014d57600080fd5b506100f5610450565b34801561016257600080fd5b506100b5610487565b6000610175610359565b9050806101ae57681b1ae4d6e2ef5000008210156101ae5760405162461bcd60e51b81526004016101a590610809565b60405180910390fd5b33306101b8610487565b6001600160a01b03166323b872dd8383876040518463ffffffff1660e01b81526004016101e793929190610747565b602060405180830381600087803b15801561020157600080fd5b505af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906106ad565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b61026c61042c565b42101561028b5760405162461bcd60e51b81526004016101a5906107b7565b6000610295610487565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102c09190610719565b60206040518083038186803b1580156102d857600080fd5b505afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031091906106e5565b9050600081116103325760405162461bcd60e51b81526004016101a590610924565b61035661033d610240565b82610346610487565b6001600160a01b031691906104ab565b50565b6000610363610487565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161038e9190610719565b60206040518083038186803b1580156103a657600080fd5b505afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de91906106e5565b905090565b60006103ed610487565b6001600160a01b03166370a08231336040518263ffffffff1660e01b815260040161038e9190610719565b60005461010090046001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000090565b600061045a610487565b6001600160a01b031663dd62ed3e33306040518363ffffffff1660e01b815260040161038e92919061072d565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105018363a9059cbb60e01b84846040516024016104ca92919061076b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610506565b505050565b600061055b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105959092919063ffffffff16565b805190915015610501578080602001905181019061057991906106ad565b6105015760405162461bcd60e51b81526004016101a5906108da565b60606105a484846000856105ae565b90505b9392505050565b6060824710156105d05760405162461bcd60e51b81526004016101a59061085d565b6105d98561066e565b6105f55760405162461bcd60e51b81526004016101a5906108a3565b600080866001600160a01b0316858760405161061191906106fd565b60006040518083038185875af1925050503d806000811461064e576040519150601f19603f3d011682016040523d82523d6000602084013e610653565b606091505b5091509150610663828286610674565b979650505050505050565b3b151590565b606083156106835750816105a7565b8251156106935782518084602001fd5b8160405162461bcd60e51b81526004016101a59190610784565b6000602082840312156106be578081fd5b815180151581146105a7578182fd5b6000602082840312156106de578081fd5b5035919050565b6000602082840312156106f6578081fd5b5051919050565b6000825161070f818460208701610970565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526107a3816040850160208701610970565b601f01601f19169190910160400192915050565b60208082526032908201527f546f6b656e54696d656c6f636b3a2063757272656e742074696d65206973206260408201527165666f72652072656c656173652074696d6560701b606082015260800190565b60208082526034908201527f547279696e6720746f207374616b65206c657373207468616e20746865206d696040820152731b9a5b5d5b481cdd185ada5b99c8185b5bdd5b9d60621b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526023908201527f546f6b656e54696d656c6f636b3a206e6f20746f6b656e7320746f2072656c6560408201526261736560e81b606082015260800190565b90815260200190565b60005b8381101561098b578181015183820152602001610973565b8381111561099a576000848401525b5050505056fea264697066735822122057e973951324089c84737c0f477e20f80ca22095168c9a452c25860766ba710f64736f6c63430008000033a26469706673582212203aab8607733ccd585dc074c483c9377860d019f4df408b261a8fd81dcf8d08c864736f6c63430008000033";

type StakingContractFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingContractFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingContractFactory__factory extends ContractFactory {
  constructor(...args: StakingContractFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _camoToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingContractFactory> {
    return super.deploy(
      _camoToken,
      overrides || {}
    ) as Promise<StakingContractFactory>;
  }
  getDeployTransaction(
    _camoToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_camoToken, overrides || {});
  }
  attach(address: string): StakingContractFactory {
    return super.attach(address) as StakingContractFactory;
  }
  connect(signer: Signer): StakingContractFactory__factory {
    return super.connect(signer) as StakingContractFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractFactoryInterface {
    return new utils.Interface(_abi) as StakingContractFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingContractFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakingContractFactory;
  }
}
