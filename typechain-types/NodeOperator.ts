/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NodeOperatorInterface extends ethers.utils.Interface {
  functions: {
    "depositStablecoin(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "payout()": FunctionFragment;
    "proxies(address)": FunctionFragment;
    "proxiesCount(uint256)": FunctionFragment;
    "registerProxy()": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "totalProxies()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositStablecoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(functionFragment: "proxies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proxiesCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProxies",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalProxies",
    data: BytesLike
  ): Result;

  events: {
    "ProxyRegistered(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyRegistered"): EventFragment;
}

export type ProxyRegisteredEvent = TypedEvent<
  [string, string, BigNumber],
  { proxy: string; nodeOperator: string; timestamp: BigNumber }
>;

export type ProxyRegisteredEventFilter = TypedEventFilter<ProxyRegisteredEvent>;

export interface NodeOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NodeOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositStablecoin(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxies(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    proxiesCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    totalProxies(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  depositStablecoin(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxies(arg0: string, overrides?: CallOverrides): Promise<string>;

  proxiesCount(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerProxy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  totalProxies(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    depositStablecoin(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(overrides?: CallOverrides): Promise<void>;

    proxies(arg0: string, overrides?: CallOverrides): Promise<string>;

    proxiesCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerProxy(overrides?: CallOverrides): Promise<void>;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    totalProxies(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProxyRegistered(address,address,uint256)"(
      proxy?: string | null,
      nodeOperator?: null,
      timestamp?: null
    ): ProxyRegisteredEventFilter;
    ProxyRegistered(
      proxy?: string | null,
      nodeOperator?: null,
      timestamp?: null
    ): ProxyRegisteredEventFilter;
  };

  estimateGas: {
    depositStablecoin(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    proxiesCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    totalProxies(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositStablecoin(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiesCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalProxies(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
